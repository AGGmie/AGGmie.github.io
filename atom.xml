<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grow with AGGmie</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://AGGmie.github.io/"/>
  <updated>2018-10-31T10:56:55.662Z</updated>
  <id>http://AGGmie.github.io/</id>
  
  <author>
    <name>AGGmie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WeChall write up part 1</title>
    <link href="http://AGGmie.github.io/2018/10/31/WeChall-write-up-part-1/"/>
    <id>http://AGGmie.github.io/2018/10/31/WeChall-write-up-part-1/</id>
    <published>2018-10-31T10:37:44.000Z</published>
    <updated>2018-10-31T10:56:55.662Z</updated>
    
    <content type="html"><![CDATA[<p>wechall 第一部分writeup，各位师傅有更好的思路欢迎交流。</p><h3 id="Training-Get-Sourced-Training"><a href="#Training-Get-Sourced-Training" class="headerlink" title="Training: Get Sourced (Training)"></a>Training: Get Sourced (Training)</h3><p>右键查看源代码，拉到最下就可以看到答案</p><h3 id="Training-Stegano-I-Training-Stegano"><a href="#Training-Stegano-I-Training-Stegano" class="headerlink" title="Training: Stegano I (Training, Stegano)"></a>Training: Stegano I (Training, Stegano)</h3><p>直接右键图片另存为，打开</p><h3 id="Training-Crypto-Caesar-I-Crypto-Training"><a href="#Training-Crypto-Caesar-I-Crypto-Training" class="headerlink" title="Training: Crypto - Caesar I (Crypto, Training)"></a>Training: Crypto - Caesar I (Crypto, Training)</h3><p>凯撒加密，找网站解一下即可，看清楚点交solution别把一整句话都交上去啦</p><h3 id="Training-WWW-Robots-HTTP-Training"><a href="#Training-WWW-Robots-HTTP-Training" class="headerlink" title="Training: WWW-Robots (HTTP, Training)"></a>Training: WWW-Robots (HTTP, Training)</h3><p>大家可能一开始一脸懵逼连提交框在哪都找不到，其实hint就是提供的wiki页面介绍的知识。在网站的根目录一般会安放robots.txt文件用来提示网络爬虫什么该爬，什么不该爬。访问<a href="http://www.wechall.net/robots.txt就会发现一个禁止爬取的路径/challenge/training/www/robots/T0PS3CR3T/" target="_blank" rel="noopener">http://www.wechall.net/robots.txt就会发现一个禁止爬取的路径/challenge/training/www/robots/T0PS3CR3T/</a> 直接访问这个路径就可以啦</p><h3 id="Training-ASCII-Training-Encoding"><a href="#Training-ASCII-Training-Encoding" class="headerlink" title="Training: ASCII (Training, Encoding)"></a>Training: ASCII (Training, Encoding)</h3><p>ASCii值转字符，直接python写个小脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ASCiiList = [<span class="number">84</span>,<span class="number">104</span>,<span class="number">101</span>,<span class="number">32</span>,<span class="number">115</span>,<span class="number">111</span>,</span><br><span class="line">             <span class="number">108</span>,<span class="number">117</span>,<span class="number">116</span>,<span class="number">105</span>,<span class="number">111</span>,<span class="number">110</span>,</span><br><span class="line">             <span class="number">32</span>,<span class="number">105</span>,<span class="number">115</span>,<span class="number">58</span>,<span class="number">32</span>,<span class="number">109</span>,<span class="number">112</span>,</span><br><span class="line">             <span class="number">115</span>,<span class="number">108</span>,<span class="number">114</span>,<span class="number">112</span>,<span class="number">104</span>,<span class="number">101</span>,</span><br><span class="line">             <span class="number">109</span>,<span class="number">98</span>,<span class="number">110</span>,<span class="number">104</span>]</span><br><span class="line">str = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> ASCii <span class="keyword">in</span> ASCiiList:</span><br><span class="line">    <span class="keyword">print</span> (ASCii)</span><br><span class="line">    str += chr(int(ASCii))</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><h3 id="Encodings-URL-Training-Encoding"><a href="#Encodings-URL-Training-Encoding" class="headerlink" title="Encodings: URL (Training, Encoding)"></a>Encodings: URL (Training, Encoding)</h3><p>URL编码，找网站解码，会给你一个URL，直接访问即可</p><h3 id="Prime-Factory-Training-Math"><a href="#Prime-Factory-Training-Math" class="headerlink" title="Prime Factory (Training, Math)"></a>Prime Factory (Training, Math)</h3><p>找到两个大于100万的素数并且每个素数每一位相加的结果也是素数。思路很简单，先判断他本身是不是素数，然后把每一位遍历相加，再判断是不是素数，为了方便每一位相加，我把数字按字符串保存，然后用int()函数再转成数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IsPrime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, num // <span class="number">2</span> + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">num = <span class="string">'1000000'</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">answer = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">if</span> IsPrime(int(num)):</span><br><span class="line">        SumNum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> num:</span><br><span class="line">            SumNum += int(char)</span><br><span class="line">        <span class="keyword">if</span> IsPrime(SumNum):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            answer += num</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">2</span>:</span><br><span class="line">        print(answer)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    num = str(int(num)+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Training-Encodings-I-Training-Encoding"><a href="#Training-Encodings-I-Training-Encoding" class="headerlink" title="Training: Encodings I (Training, Encoding)"></a>Training: Encodings I (Training, Encoding)</h3><p>这题是把ASCii转换成了二进制，然后7比特位一组转换成十进制的ASCii值再转换成字符就可以了，官方给的JPK可以帮助你完成这个操作，我是自己直接写了个小脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">binaryString = <span class="string">"101010011010001101001111001101000001110100110010111110001110100010000011010011110011010000001101110101101110001011010011110100010000011001011101110110001111011111100100110010111001000100000110000111100111100011110100111010010101110010000010110011101111111010111100100100000111000011000011110011111001111101111101111111001011001000100000110100111100110100000110010111000011110011111100111100111110100110000111100101110100110010111100100101110"</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">string = <span class="string">""</span></span><br><span class="line">finallString = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> binaryString:</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    string += char</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">7</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        finallString += chr(int(string,<span class="number">2</span>))</span><br><span class="line">        string = <span class="string">""</span></span><br><span class="line"><span class="keyword">print</span> (finallString)</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Training-Programming-1-Training-Coding"><a href="#Training-Programming-1-Training-Coding" class="headerlink" title="Training: Programming 1 (Training, Coding)"></a>Training: Programming 1 (Training, Coding)</h3><p>1.337s之内返回，不知道有没有手快的大手子能手动搞定，我这个老年帕金森还是找py霸霸帮我吧</p><p>脚本就是收到返回值再发出去，记得抓下自己的cookies放上去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">cookies = &#123;<span class="string">'WC'</span>:<span class="string">''</span>&#125;<span class="comment">#设置你自己的cookies</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.wechall.net/challenge/training/programming1/index.php?action=request"</span>,cookies = cookies)</span><br><span class="line">requests.get(<span class="string">"http://www.wechall.net/challenge/training/programming1/index.php?answer=&#123;&#125;"</span>.format(response.text),cookies = cookies)</span><br></pre></td></tr></table></figure><h3 id="Training-Regex-Training-Regex"><a href="#Training-Regex-Training-Regex" class="headerlink" title="Training: Regex (Training, Regex)"></a>Training: Regex (Training, Regex)</h3><p>贴个学习链接<a href="https://github.com/ziishaned/learn-regex/blob/master/README-cn.md，正则表达式这东西还是靠多用才能记住。多练多查别死记硬背。" target="_blank" rel="noopener">https://github.com/ziishaned/learn-regex/blob/master/README-cn.md，正则表达式这东西还是靠多用才能记住。多练多查别死记硬背。</a>(说的我好像会了似得，逃~</p><p>level 1:/^$/头尾相接就是空串</p><p>level 2：/^wechall$/ </p><p>level 3: 尝试1：/^wechall4?\.(tiff|png|jpg|bmp)\$/  说我多了，然后  /^wechall4?.(?:tiff|png|jpg|bmp|gif) \$/</p><p>level 4:/^(wechall4?)\.(?:tiff|png|jpg|bmp|gif)$/</p><p>这里说一下()和(?:)的区别，实际上他们都能匹配上东西，不过()是捕获并返回，而(?:)只捕获不返回，因此level4为了返回将wechall4?放在了()中，而level 3因为只捕获不返回，所以我的尝试1出错</p><h3 id="Training-PHP-LFI-Exploit-PHP-Training"><a href="#Training-PHP-LFI-Exploit-PHP-Training" class="headerlink" title="Training: PHP LFI (Exploit, PHP, Training)"></a>Training: PHP LFI (Exploit, PHP, Training)</h3><p>（吐槽：每次打开全英文的页面点开翻译，然后看着像是不知道哪位火星老哥给我翻译的中文就有一种想去狂背单词的欲望呢嘻嘻。悔不当初悔不当初呜呜呜，对不起我各位美女英语老师）</p><p>简单说一下本地文件包含漏洞就是可以让用户自己控制访问的路径，访问服务器本地的其他文件。再这里说个最常见的技巧。因为很多网站访问文件是不用你提供后缀的，那么问题来了即使有LFI，我想访问.php你给我定了个.txt后缀可咋整啊。这就用的PHP经常使用的技巧%00截断。因为PHP内核是C语言实现的（所以世界上最好的语言其实是？？）,C语言的字符串结束符是%00，所以如果你人为的输入%00就会把%00后面的内容截断了。就可以访问任意类型文件了。</p><p>payload :file=../../solution.php%00</p><p>所以为啥返回了两层啊？？我是瞎试试出来的..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;wechall 第一部分writeup，各位师傅有更好的思路欢迎交流。&lt;/p&gt;
&lt;h3 id=&quot;Training-Get-Sourced-Training&quot;&gt;&lt;a href=&quot;#Training-Get-Sourced-Training&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="wechall" scheme="http://AGGmie.github.io/categories/wechall/"/>
    
    
      <category term="wechall" scheme="http://AGGmie.github.io/tags/wechall/"/>
    
  </entry>
  
</feed>
